library(tidyverse)
data(msleep)
library(tidyverse)
sleep <- data(msleep)
data(msleep)
view(msleep)
sleep <- source(msleep)
sleep <- msleep
View(sleep)
View(sleep)
glimpse(sleep)
skimr::skim(sleep)
sleep %>%
ggplot(aes(sleep_total)) +
geom_histogram()
sleep %>%
ggplot(aes(sleep_total)) +
geom_histogram(col = "white")
sleep %>%
ggplot(aes(sleep_total)) +
geom_boxplot()
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(total_sleep))
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(total_sleep))
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(sleep_total))
View(mean_sleep)
mean_sleep
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(sleep_total)) %>%
pull()
mean_sleep
mull_dist <- sleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
library(infer)
mull_dist <- sleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = mean_sleep,
direction = "both")
null_dist <- sleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = mean_sleep,
direction = "both")
null_dist %>%
get_p_value(obs_stat = mean_sleep,
direction = "both")
sleep_p_val <- null_dist %>%
get_p_value(obs_stat = mean_sleep,
direction = "both")
View(sleep_p_val)
sleep_p_val <- null_dist %>%
get_p_value(obs_stat = mean_sleep,
direction = "both") %>%
pull()
format.pval(sleep_p_val)
herb_sleep <- sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
View(herb_sleep)
omni_sleep <- sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
library(tidyverse)
library(infer)
sleep <- msleep
glimpse(sleep)
skimr::skim(sleep)
sleep %>%
ggplot(aes(sleep_total)) +
geom_histogram(col = "white")
sleep %>%
ggplot(aes(sleep_total)) +
geom_boxplot()
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(sleep_total)) %>%
pull()
mean_sleep
null_dist <- sleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = mean_sleep,
direction = "both")
sleep_p_val <- null_dist %>%
get_p_value(obs_stat = mean_sleep,
direction = "both") %>%
pull()
format.pval(sleep_p_val)
herbi_omni_sleep <- sleep %>%
filter(vore %in% "herbi", "omni")
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni"))
View(herbi_omni_sleep)
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
View(herbi_omni_sleep)
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herb_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = herb_sleep - omni_sleep
View(sleep_diff)
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herb_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = omni_sleep - herbi_sleep
View(herb_sleep)
View(sleep_diff)
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herbi_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = omni_sleep - herbi_sleep
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
sleep <- msleep
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herbi_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = omni_sleep - herbi_sleep
View(sleep_diff)
View(sleep_diff)
null_dist_omni_herbi <- sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means",
order = c("omni", "herbi"))
null_dist_omni_herbi <- herbi_omni_sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means",
order = c("omni", "herbi"))
null_dist_omni_herbi %>%
visualise(bins = 25) +
shade_p_value(obs_stat = sleep_diff,
direction = "greater")
null_dist_omni_herbi %>%
get_p_value(obs_stat = sleep_diff,
direction = "greater")
View(sleep)
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", TRUE, FALSE))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", TRUE, FALSE)) %>%
summarise(prop_dom = sum(is_dom == TRUE) / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes") / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes") / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = n(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = count(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
10/83
prop_null_dist <- sleep %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
prop_null_dist <- sleep_dom_col %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
View(sleep_dom_col)
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na(is_dom, "no")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na("no")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na(is_dom = "no")
sleep_dom_col %>%
replace_na(is_dom == "no")
sleep_dom_col %>%
replace_na(is_dom = "no")
sleep_dom_col$is_dom %>%
replace_na("no")
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col <- $is_dom %>%
sleep_dom_col <- sleep_dom_col$is_dom %>%
replace_na("no")
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
sleep <- msleep
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
View(sleep_dom_col)
prop_null_dist <- sleep_dom_col %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
prop <- sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep)) %>%
pull()
prop_null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = prop,
direction = "greater")
prop_null_dist %>%
get_p_value(obs_stat = prop,
direction = "greater")
library(tidyverse)
library(infer)
books <- read_csv("data/books.csv") %>%
janitor::clean_names()
books_tidy <- books %>%
drop_na(average_rating)
ggplot(books_tidy, aes(x = average_rating)) +
geom_histogram(colour = "white")
ggplot(books_tidy, aes(x = average_rating)) +
geom_boxplot()
observed_stat <- books_tidy %>%
summarise(mean_rating = mean(average_rating))
observed_stat
null_distribution <- books_tidy %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.93) %>%
generate(reps = 2000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution %>%
visualise(bins = 25)
observed_stat
null_distribution %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat$mean_rating,
direction = "both") #direction depends on your hypotheses
null_distribution %>%
get_p_value(
obs_stat = observed_stat$mean_rating,
direction = "both"
)
books %>%
group_by(language_code) %>%
count()
spanish_books <- books %>%
filter(language_code == "spa")
observed_stat_spanish <- spanish_books %>%
summarise(mean_rating = mean(average_rating))
observed_stat_spanish
null_distribution_span <- spanish_books %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.96) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution_span %>%
visualise(bins = 25)
null_distribution_span %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat_spanish$mean_rating,
direction = "less") #direction depends on your hypotheses
null_distribution_span %>%
get_p_value(
obs_stat = observed_stat_spanish$mean_rating,
direction = "less"
)
