sleep <- msleep
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herbi_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = omni_sleep - herbi_sleep
View(sleep_diff)
View(sleep_diff)
null_dist_omni_herbi <- sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means",
order = c("omni", "herbi"))
null_dist_omni_herbi <- herbi_omni_sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means",
order = c("omni", "herbi"))
null_dist_omni_herbi %>%
visualise(bins = 25) +
shade_p_value(obs_stat = sleep_diff,
direction = "greater")
null_dist_omni_herbi %>%
get_p_value(obs_stat = sleep_diff,
direction = "greater")
View(sleep)
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", TRUE, FALSE))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", TRUE, FALSE)) %>%
summarise(prop_dom = sum(is_dom == TRUE) / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes") / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes") / nrow(sleep))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = sum(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = n(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
summarise(prop_dom = count(is_dom == "yes"))
sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
10/83
prop_null_dist <- sleep %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
prop_null_dist <- sleep_dom_col %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
View(sleep_dom_col)
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na(is_dom, "no")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na("no")
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no")) %>%
replace_na(is_dom = "no")
sleep_dom_col %>%
replace_na(is_dom == "no")
sleep_dom_col %>%
replace_na(is_dom = "no")
sleep_dom_col$is_dom %>%
replace_na("no")
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col <- $is_dom %>%
sleep_dom_col <- sleep_dom_col$is_dom %>%
replace_na("no")
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
sleep <- msleep
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom <- sleep_dom_col$is_dom %>%
replace_na("no")
sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep))
View(sleep_dom_col)
prop_null_dist <- sleep_dom_col %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
prop <- sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep)) %>%
pull()
prop_null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = prop,
direction = "greater")
prop_null_dist %>%
get_p_value(obs_stat = prop,
direction = "greater")
library(tidyverse)
library(infer)
books <- read_csv("data/books.csv") %>%
janitor::clean_names()
books_tidy <- books %>%
drop_na(average_rating)
ggplot(books_tidy, aes(x = average_rating)) +
geom_histogram(colour = "white")
ggplot(books_tidy, aes(x = average_rating)) +
geom_boxplot()
observed_stat <- books_tidy %>%
summarise(mean_rating = mean(average_rating))
observed_stat
null_distribution <- books_tidy %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.93) %>%
generate(reps = 2000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution %>%
visualise(bins = 25)
observed_stat
null_distribution %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat$mean_rating,
direction = "both") #direction depends on your hypotheses
null_distribution %>%
get_p_value(
obs_stat = observed_stat$mean_rating,
direction = "both"
)
books %>%
group_by(language_code) %>%
count()
spanish_books <- books %>%
filter(language_code == "spa")
observed_stat_spanish <- spanish_books %>%
summarise(mean_rating = mean(average_rating))
observed_stat_spanish
null_distribution_span <- spanish_books %>%
specify(response = average_rating) %>%
hypothesise(null = "point", mu = 3.96) %>%
generate(reps = 5000, type = "bootstrap") %>%
calculate(stat = "mean")
null_distribution_span %>%
visualise(bins = 25)
null_distribution_span %>%
visualise(bins = 25) +
shade_p_value(obs_stat = observed_stat_spanish$mean_rating,
direction = "less") #direction depends on your hypotheses
null_distribution_span %>%
get_p_value(
obs_stat = observed_stat_spanish$mean_rating,
direction = "less"
)
library(tidyverse)
library(infer)
sleep <- msleep
glimpse(sleep)
skimr::skim(sleep)
sleep %>%
ggplot(aes(sleep_total)) +
geom_histogram(col = "white")
sleep %>%
ggplot(aes(sleep_total)) +
geom_boxplot()
mean_sleep <- sleep %>%
summarise(mean_sleep = mean(sleep_total)) %>%
pull()
mean_sleep
null_dist <- sleep %>%
specify(response = sleep_total) %>%
hypothesise(null = "point", mu = 7) %>%
generate(reps = 10000, type = "bootstrap") %>%
calculate(stat = "mean")
null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = mean_sleep,
direction = "both")
sleep_p_val <- null_dist %>%
get_p_value(obs_stat = mean_sleep,
direction = "both") %>%
pull()
format.pval(sleep_p_val)
herbi_omni_sleep <- sleep %>%
filter(vore %in% c("herbi", "omni")) %>%
select(vore, sleep_total)
herbi_sleep <- herbi_omni_sleep %>%
filter(vore == "herbi") %>%
summarise(herbi_mean_sleep = mean(sleep_total))
omni_sleep <- herbi_omni_sleep %>%
filter(vore == "omni") %>%
summarise(omni_mean_sleep = mean(sleep_total))
sleep_diff = omni_sleep - herbi_sleep
null_dist_omni_herbi <- herbi_omni_sleep %>%
specify(sleep_total ~ vore) %>%
hypothesise(null = "independence") %>%
generate(reps = 10000, type = "permute") %>%
calculate(stat = "diff in means",
order = c("omni", "herbi"))
null_dist_omni_herbi %>%
visualise(bins = 25) +
shade_p_value(obs_stat = sleep_diff,
direction = "greater")
null_dist_omni_herbi %>%
get_p_value(obs_stat = sleep_diff,
direction = "greater")
# The null distribution analysis wouldn't run with yes, no and NA in the new is_dom. For the reasons stated above the NA values in this column were converted to "no"
sleep_dom_col <- sleep %>%
mutate(is_dom = ifelse(conservation == "domesticated", "yes", "no"))
sleep_dom_col$is_dom <- sleep_dom_col$is_dom %>%
replace_na("no")
prop <- sleep_dom_col %>%
filter(is_dom == "yes") %>%
summarise(prop_dom = n() / nrow(sleep)) %>%
pull()
prop_null_dist <- sleep_dom_col %>%
specify(response = is_dom, success = "yes") %>%
hypothesise(null = "point", p = 0.05) %>%
generate(reps = 20000, type = "draw") %>%
calculate(stat = "prop")
prop_null_dist %>%
visualise(bins = 25) +
shade_p_value(obs_stat = prop,
direction = "greater")
prop_null_dist %>%
get_p_value(obs_stat = prop,
direction = "greater")
transactions <- read_csv("data/online_retail_subset.csv")
View(transactions)
rm
rm()
rm()
rm(list = ls())
transactions <- read_csv("data/online_retail_subset.csv")
transactions <- read_csv("data/online_retail_subset.csv") %>% janitor::clean_names()
View(transactions)
total_transactions <-  transactions %>%
group_by(invoice_no) %>%
n()
total_transactions <-  transactions %>%
group_by(invoice_no) %>%
summarise(n())
View(total_transactions)
total_transactions <-  transactions %>%
group_by(customer_id) %>%
summarise(n())
View(total_transactions)
total_transactions <-  transactions %>%
distinct(invoice_no)
View(total_transactions)
total_transactions <-  transactions %>%
count(distinct(invoice_no))
total_transactions <-  transactions %>%
distinct(invoice_no) %>%
n()
total_transactions <-  transactions %>%
distinct(invoice_no) %>%
summarise(n())
View(total_transactions)
total_transactions <-  transactions %>%
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
glimpse(transactions)
transactions %>%
filter(stock_code == "22469")
transactions %>%
filter(stock_code == "22469") %>%  # get 110 rows
group_by(invoice_no) %>%
summarise(n()) %>%
pull()
transactions %>%
filter(stock_code == "22469") %>%  # get 110 rows
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
item_A_trans <- transactions %>%
filter(stock_code == "22469") %>%  # get 110 rows
# some transaction purchased 2 of the items of interest
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
sup_A <- item_A_trans / total_transactions
sup_A
transactions %>%
filter(stock_code == "22469")
transactions %>%
filter(stock_code == "22469",
stock_code == "21110")
transactions %>%
filter(stock_code %in% c("22469","21110")
transactions %>%
transactions %>%
filter(stock_code %in% c("22469", "21110"))
transactions %>%
filter(stock_code %in% c("22469", "21110")) %>%
group_by(invoice_no) %>%
summarise(n())
transactions %>%
filter(stock_code %in% c("22469", "21110")) %>%
group_by(invoice_no) %>%
summarise(items_per_trans = n())
View(transactions)
transactions %>%
filter(stock_code %in% c("22469", "21110")) %>%
group_by(invoice_no) %>%
summarise(items_per_trans = n()) %>%
filter(items_per_trans > 1)
invoices <- transactions %>%
filter(stock_code %in% c("22469", "21110")) %>%
group_by(invoice_no) %>%
summarise(items_per_trans = n()) %>%
filter(items_per_trans > 1) %>%
select(invoice_no)
View(invoices)
transaction %>%
filter(invoice_no %in% invoices)
transactions %>%
filter(invoice_no %in% invoices)
transactions %>%
filter(invoice_no %in% invoices$invoice_no)
View(invoices)
transactions %>%
filter(stock_code == "22469")
item_A_invoice_nums <- transactions %>%
filter(stock_code == "22469") %>%
distinct(invoice_num)
item_A_invoice_nums <- transactions %>%
filter(stock_code == "22469") %>%
distinct(invoice_no)
View(item_A_invoice_nums)
transactions %>%
filter(stock_code == "21110")
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% item_A_invoice_nums)
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% item_A_invoice_nums)
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% c(item_A_invoice_nums))
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% c(item_A_invoice_nums))
item_A_invoice_nums <- transactions %>%
filter(stock_code == "22469") %>%
distinct(invoice_no)
transactions <- read_csv("data/online_retail_subset.csv") %>% janitor::clean_names()
total_transactions <-  transactions %>%
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
item_A_trans <- transactions %>%
filter(stock_code == "22469") %>%  # get 110 rows
# some transaction purchased 2 of the items of interest
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
total_transactions <-  transactions %>%
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
item_A_trans <- transactions %>%
filter(stock_code == "22469") %>%  # get 110 rows
# some transaction purchased 2 of the items of interest
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
sup_A <- item_A_trans / total_transactions
sup_A
item_A_invoice_nums <- transactions %>%
filter(stock_code == "22469") %>%
distinct(invoice_no)
View(item_A_invoice_nums)
transactions %>%
filter(stock_code == "21110")
item_A_invoice_nums <- transactions %>%
filter(stock_code == "22469") %>%
distinct(invoice_no)
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% item_A_invoice_nums)
View(item_A_invoice_nums)
item_A_invoice_nums <- item_A_invoice_nums$invoice_no
transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% item_A_invoice_nums)
item_A_B_invoice_nums <- transactions %>%
filter(stock_code == "21110") %>%
filter(invoice_no %in% item_A_invoice_nums) %>%
select(invoice_no)
sup_AB <- nrow(item_A_B_invoice_nums) / total_transactions
sup_AB
conf_AB <- sup_AB / sup_A
conf_AB
item_B_trans <- transactions %>%
filter(stock_code == "21110") %>%  # get 110 rows
# some transaction purchased 2 of the items of interest
distinct(invoice_no) %>%
summarise(n()) %>%
pull()
item_B_trans <- transactions %>%
filter(stock_code == "21110")
View(item_B_trans)
# item B was never purchased twice in one transaction, all invoice number
# are unique
item_B_trans <- transactions %>%
filter(stock_code == "21110") %>%
summarise(n()) %>%
pull()
# item B was never purchased twice in one transaction, all invoice number
# are unique
item_B_trans <- transactions %>%
filter(stock_code == "21110") %>%
summarise(n()) %>%
pull()
sup_B <- item_B_trans / total_transactions
sup_B
lift_AB <- sup_AB / (sup_A * sup_B)
sup_A * sup_B
lift_AB <- sup_AB / (sup_A * sup_B)
lift_AB <- sup_AB / (sup_A * sup_B)
lift_AB
library(arules)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
transactions_reformat <- transactions %>%
select(InvoiceNo, Description) %>%
na.omit()
rm(transactions)
transactions <- read_csv("data/online_retail_subset.csv")
transactions_reformat <- transactions %>%
select(InvoiceNo, Description) %>%
na.omit()
write_csv(transactions_reformat, "transactions_reformat.csv")
apriori_format <- read.transactions("transactions_reformat.csv", format = "single", sep = ",", header = TRUE, cols = c("InvoiceNo", "Description"))
View(transactions_reformat)
inspect(head(apriori_format))
?arules
??arules
rules <- apriori(apriori_format, supp = 1, conf = 0.9, target = "rules")
?apriori
rules <- apriori(apriori_format, parameter = list(supp = 1, conf = 0.9, target = "rules"))
summary(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
summary(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.01, conf = 0.9, target = "rules"))
summary(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.001, conf = 0.9, target = "rules"))
summary(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.005, conf = 0.9, target = "rules"))
summary(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.008, conf = 0.9, target = "rules"))
summary(rules)
View(rules)
inspect(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.1, conf = 0.9, target = "rules"))
inspect(rules)
rules <- apriori(apriori_format, parameter = list(supp = 0.01, conf = 0.9, target = "rules"))
inspect(rules[1:10])
rules <- apriori(apriori_format, parameter = list(supp = 0.01, conf = 0.5, target = "rules"))
inspect(rules[1:10])
