# Functions taken from the {prob} package.
# Kerns G (2018). _prob: Elementary Probability on Finite Sample Spaces_.
# R package version 1.0-1,
# <https://CRAN.R-project.org/package=prob>.
rolldie <- function(times, nsides = 6) {
temp = list()
for (i in 1:times) {
temp[[i]] <- 1:nsides
}
res <- expand.grid(temp, KEEP.OUT.ATTRS = FALSE)
names(res) <- c(paste(rep("X", times), 1:times, sep = ""))
return(res)
}
tosscoin <- function (times)
{
temp <- list()
for (i in 1:times) {
temp[[i]] <- c("H", "T")
}
res <- expand.grid(temp, KEEP.OUT.ATTRS = FALSE)
names(res) <- c(paste(rep("toss", times), 1:times, sep = ""))
return(res)
}
cards <- function (jokers = FALSE)
{
x <- c(2:10, "J", "Q", "K", "A")
y <- c("Club", "Diamond", "Heart", "Spade")
res <- expand.grid(rank = x, suit = y)
if (jokers) {
levels(res$rank) <- c(levels(res$rank), "Joker")
res <- rbind(res, data.frame(rank = c("Joker", "Joker"),
suit = c(NA, NA)))
}
return(res)
}
isin <- function (x, y, ordered = FALSE, ...)
{
apply(x, MARGIN = 1, FUN = \(x) {
res <- (length(y) <= length(x))
if (res) {
temp <- x
for (i in 1:length(y)) {
if (is.element(y[i], temp)) {
if (!ordered) {
temp <- temp[-which(temp %in% y[i])[1]]
}
else {
temp <- temp[-(1:which(temp %in% y[i])[1])]
}
}
else {
res <- FALSE
i <- length(y)
}
}
}
res
}, ...)
}
q1_prob <- length(less_than_five) / length(die)
die <- c(1, 2, 3, 4, 5, 6)
less_than_five <- c(1,2,3,4)
q1_prob <- length(less_than_five) / length(die)
die <- c(1, 2, 3, 4, 5, 6)
less_than_five <- c(1,2,3,4)
q1_prob <- length(less_than_five) / length(die)
q1_prob
library(tidyverse)
library(gtools)
?permutations
num_outcomes <- permutations(6, 3, die)
num_outcomes
nrow(num_outcomes)
num_outcomes <- permutations(6, 4, die)
q2_num_outcomes <- permutations(6, 3, die)
nrow(num_outcomes)
q2_num_outcomes <- permutations(6, 3, die)
nrow(q2_num_outcomes)
q3_num_outcomes <- permutations(6, 4, die)
q3_num_outcomes <- as_tibble(permutations(6, 4, die))
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die))
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die))
nrow(q3_num_outcomes)
q3_total_5_to_7 <- as_tibble(permutations(n = 6, r = 4, v = die))
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die))
q3_num_outcomes %>%
mutate(total = sum(V1, V2, V3, V4))
q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4)
q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4) %>%
order(desc(total))
q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4) %>%
order(desc(total))
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4) %>%
order(desc(total))
View(q3_num_outcomes)
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4)
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(combinations(n = 6, r = 4, v = die))
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(combinations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
View(q3_num_outcomes)
q2_num_outcomes <- permutations(6, 3, die)
nrow(q2_num_outcomes)
q2_num_outcomes
q2_num_outcomes <- permutations(6, 3, die, repeats.allowed = TRUE)
q2_num_outcomes
nrow(q2_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4)
View(q3_num_outcomes)
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(total == between(5, 7))
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(total == between(total, 5, 7))
q3_total_5_to_7
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(total == 5 | total == 6| total == 7)
q3_total_5_to_7
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(between(total, 5, 7))
q3_total_5_to_7
q3_prob <- nrow(q3_total_5_to_7) / nrow(q3_num_outcomes)
q3_prob
q4_num_outcomes <- combinations(n = 5, r = 5, v = height, repeats.allowed = FALSE)
height = c(a, b, c, d, e)
q4_num_outcomes <- combinations(n = 5, r = 5, v = height, repeats.allowed = FALSE)
height = c(a, b, c, d, e)
height <- c(a, b, c, d, e)
height <- c(a, b, c, d, e)
heights <- c(1, 2, 3, 4, 5)
q4_num_outcomes <- combinations(n = 5, r = 5, v = height, repeats.allowed = FALSE)
q4_num_outcomes <- combinations(n = 5, r = 5, v = heights, repeats.allowed = FALSE)
q4_num_outcomes
q4_num_outcomes <- permutations(n = 5, r = 5, v = heights, repeats.allowed = FALSE)
q4_num_outcomes
q4_prob <- 1 / nrow(q4_num_outcomes)
q4_prob
q5_num_outcomes <- permutations(n = 6, r = 6, v = die, repeats.allowed = TRUE)
q5_prob_1 <- 1 / nrow(q5_num_outcomes)
q5_prob_1
q4_num_outcomes_no_repeats <- permutations(n = 6, r = 6, v = die, repeats.allowed = FALSE)
q4_num_outcomes_no_repeats
q5_num_outcomes_no_repeats <- permutations(n = 6, r = 6, v = die,
repeats.allowed = FALSE)
q5_num_outcomes_no_repeats
q5_prob_2 <- q5_num_outcomes_no_repeats / q5_num_outcomes
q5_prob_2 <- nrow(q5_num_outcomes_no_repeats) / nrow(q5_num_outcomes)
q5_prob_2
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
library(tidyverse)
library(gtools)
die <- c(1, 2, 3, 4, 5, 6)
less_than_five <- c(1,2,3,4)
q1_prob <- length(less_than_five) / length(die)
q1_prob
q2_num_outcomes <- permutations(6, 3, die, repeats.allowed = TRUE)
nrow(q2_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4)
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(between(total, 5, 7))
q3_prob <- nrow(q3_total_5_to_7) / nrow(q3_num_outcomes)
q3_prob
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE), .name_repair = unique)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE), .name_repair = universal)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE), .name_repair = "universal")
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE), .name_repair = "unique")
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = V1 + V2 + V3 + V4)
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = rowSums(.))
View(q3_num_outcomes)
q3_num_outcomes <- as_tibble(permutations(n = 6, r = 4, v = die, repeats.allowed = TRUE))
q3_num_outcomes <- q3_num_outcomes %>%
mutate(total = rowSums(.))
q3_total_5_to_7 <- q3_num_outcomes %>%
filter(between(total, 5, 7))
q3_prob <- nrow(q3_total_5_to_7) / nrow(q3_num_outcomes)
q3_prob
