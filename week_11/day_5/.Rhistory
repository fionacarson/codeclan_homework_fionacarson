juice <- read_csv("data/orange_juice.csv")
library(tidyverse)
juice <- read_csv("data/orange_juice.csv")
View(juice)
library(janitor)
juice <- read_csv("data/orange_juice.csv") %>%
clean_names()
alias(purchase ~ ., data = juice)
juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", yes, no))
juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no"))
juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no")) %>%
select(-purchase)
juice %>%
ggplot(aes(weekof_purchase)) +
geom_histogram()
juice %>%
ggplot(aes(weekof_purchase)) +
geom_col()
juice %>%
group_by(weekof_purchase) %>%
summarise(total = n()) %>%
ggplot(aes(x = weekof_purchase, y = total)) +
geom_col()
juice %>%
group_by(weekof_purchase) %>%
summarise(total = n()) %>%
ggplot(aes(x = weekof_purchase, y = total, fill = purchase)) +
geom_col()
juice %>%
group_by(weekof_purchase, purchase) %>%
summarise(total = n()) %>%
ggplot(aes(x = weekof_purchase, y = total, fill = purchase)) +
geom_col()
ggplot(juice, aes(weekof_purchase, fill = purchase)) +
geom_bar()
ggplot(juice, aes(weekof_purchase, fill = purchase)) +
geom_bar(stat = "prop")
ggplot(juice, aes(weekof_purchase, fill = purchase)) +
geom_bar(position = "fill")
ggplot(juice, aes(weekof_purchase, fill = purchase)) +
geom_bar()
juice <- juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no")) %>%
select(-purchase)
juice %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 239 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
))
juice %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 239 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id")
juice %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id")
juice <- juice %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id")
glimpse(juice)
juice <- juice %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id") %>%
select(-weekof_purchase)
glimpse(juice)
juice <- juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no"), .before = purchase) %>%
select(-purchase)
juice <- read_csv("data/orange_juice.csv") %>%
clean_names()
juice_clean <- juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no"), .before = purchase) %>%
select(-purchase)
ggplot(juice_clean, aes(weekof_purchase, fill = purchase)) +
geom_bar()
ggplot(juice_clean, aes(weekof_purchase, fill = purchase_mm)) +
geom_bar()
juice_clean <- juice_clean %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id") %>%
select(-weekof_purchase)
glimpse(juice)
glimpse(juice_clean)
alias(purchase_mm ~ ., data = juice)
juice %>%
mutate(purchase_mm = as_factor(purchase_mm))
juice_clean %>%
mutate(purchase_mm = as_factor(purchase_mm))
juice_clean <- juice_clean %>%
mutate(purchase_mm = as_factor(purchase_mm))
alias(purchase_mm ~ ., data = juice)
alias(purchase_mm ~ ., data = juice_clean)
View(juice_clean)
juice_clean %>%
select(-c(store, store7, -list_price_diff, -price_diff, -disc_ch, -disc_mm))
juice_clean %>%
select(-c(store, store7, list_price_diff, price_diff, disc_ch, disc_mm))
juice_clean <- juice_clean %>%
select(-c(store, store7, list_price_diff, price_diff, disc_ch, disc_mm))
alias(purchase_mm ~ ., data = juice_clean)
glimpse(juice_clean)
juice_clean <- juice_clean %>%
mutate(purchase_mm = as_factor(purchase_mm, quarter_of_purchase,
store_id, special_ch, special_mm))
juice_clean <- juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"))
juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"))
juice_clean <- juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes")) %>%
mutate(across(where(is.character()), as_factor))
juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes"))
juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes")) %>%
mutate(across(where(is.character()), as_factor))
juice_clean <- juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes")) %>%
mutate(across(where(is.character), as_factor))
juice_clean
juice_clean <- juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes")) %>%
mutate(across(where(is.character), as_factor)) %>%
mutate(store_id = as_factor(store_id))
juice_clean
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
library(glmulti)
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = juice_clean,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
juice_clean %>%
distinct(special_ch)
juice_clean %>%
distinct(special_mm)
juice <- read_csv("data/orange_juice.csv") %>%
clean_names()
juice_clean <- juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no"), .before = purchase) %>%
# special_mm and special_ch removed as every observation is "yes"
select(-purchase, -special_ch, -special_mm)
ggplot(juice_clean, aes(weekof_purchase, fill = purchase_mm)) +
geom_bar()
juice_clean <- juice_clean %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id") %>%
select(-weekof_purchase)
juice_clean <- juice_clean %>%
mutate(special_ch = ifelse(special_ch == 0, "no", "yes"),
special_mm = ifelse(special_mm == 0, "no", "yes")) %>%
mutate(across(where(is.character), as_factor)) %>%
mutate(store_id = as_factor(store_id))
juice_clean
juice_clean <- juice_clean %>%
mutate(purchase_mm = as_factor(purchase_mm),
quarter_of_purchase = as_factor(quarter_of_purchase),
store_id = as_factor(store_id))
alias(purchase_mm ~ ., data = juice_clean)
juice_clean <- juice_clean %>%
select(-c(store, store7, list_price_diff, price_diff, disc_ch, disc_mm))
alias(purchase_mm ~ ., data = juice_clean)
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = juice_clean,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_previous_mains_one_pair <- glmulti(
purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch,
data = juice_clean,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = 6,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_previous_mains_one_pair)
library(caret)
train_index <- createDataPartition(juice_clean$purchase_mm,
p = 0.8,
list = FALSE,
times = 1)
train <- juice_clean[train_index, ]
test <- juice_clean[-train_index, ]
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_previous_mains_one_pair <- glmulti(
purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch,
data = train,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = 6,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_previous_mains_one_pair)
rmse_results <- numeric(10)
for (i in 1:10){
this_model <- glmulti_search_previous_mains_one_pair@objects[[i]]
predictions <- predict(this_model, newdata = test)
rmse_results[i] <- sqrt(mean((predictions - test$purchase_mm)^2))
}
glmulti_search_previous_mains_one_pair$objects
glmulti_search_previous_mains_one_pair$objects[1]
glmulti_search_previous_mains_one_pair$objects[[1]]
View(glmulti_search_previous_mains_one_pair)
rmse_results <- numeric(10)
for (i in 1:10){
this_model <- glmulti_search_previous_mains_one_pair$objects[[i]]
predictions <- predict(this_model, newdata = test)
rmse_results[i] <- sqrt(mean((predictions - test$purchase_mm)^2))
}
glmulti_search_previous_mains_one_pair@objects[[1]]
rmse_results <- numeric(10)
for (i in 1:10){
this_model <- glmulti_search_previous_mains_one_pair@objects[[i]]
predictions <- predict(this_model, newdata = test)
rmse_results[i] <- sqrt(mean((predictions - test$purchase_mm)^2))
}
with_interactions_pred <- juice_clean %>%
add_predictions(glmulti_search_previous_mains_one_pair, type = "response")
library(moder)
library(modelr)
with_interactions_pred <- juice_clean %>%
add_predictions(glmulti_search_previous_mains_one_pair, type = "response")
View(glmulti_search_previous_mains_one_pair)
with_interactions_pred <- juice_clean %>%
add_predictions(glmulti_search_all_mains, type = "response")
View(glmulti_search_previous_mains_one_pair)
glmulti_interactions <- glm(purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch + sale_price_mm:loyal_ch + sale_price_ch:loyal_ch + sale_price_ch:sale_price_mm,
data = juice_clean,
family = binomial(link = "logit"))
with_interactions_pred <- juice_clean %>%
add_predictions(glmulti_interactions, type = "response")
juice_clean_pred_interactions <- juice_clean %>%
add_predictions(glmulti_interactions, type = "response")
roc_with_interactions <- juice_clean_pred_interactions %>%
roc(response = purchase_mmx, predictor = pred)
?roc
library(pROC)
roc_with_interactions <- juice_clean_pred_interactions %>%
roc(response = purchase_mmx, predictor = pred)
roc_with_interactions <- juice_clean_pred_interactions %>%
roc(response = purchase_mm, predictor = pred)
ggroc(data = roc_with_interactions
ggroc(data = roc_with_interactions0
ggroc(data = roc_with_interactions)
juice_clean_pred_interactions_thresh <- juice_clean_pred_interactions %>%
mutate(pred_thresh_0.5 = pred >= threshold)
threshold <-  0.5
juice_clean_pred_interactions_thresh <- juice_clean_pred_interactions %>%
mutate(pred_thresh_0.5 = pred >= threshold)
conf_table <- juice_clean_pred_interactions_thresh %>%
tabyl(churn, pred_thresh_0.5)
conf_table <- juice_clean_pred_interactions_thresh %>%
tabyl(purchase_mm, pred_thresh_0.5)
conf_table
ggpairs(juice_clean)
ggpairs(juice_clean)
library(GGally)
ggpairs(juice_clean)
ggpairs(juice_clean, progress = FALSE)
library(tidyverse)
library(janitor)
library(glmulti)
library(caret)
library(modelr)
library(pROC)
library(GGally)
juice <- read_csv("data/orange_juice.csv") %>%
clean_names()
juice_clean <- juice %>%
mutate(purchase_mm = ifelse(purchase == "MM", "yes", "no"), .before = purchase) %>%
# special_mm and special_ch removed as every observation is "yes"
select(-purchase, -special_ch, -special_mm)
ggplot(juice_clean, aes(weekof_purchase, fill = purchase_mm)) +
geom_bar()
juice_clean <- juice_clean %>%
mutate(quarter_of_purchase = case_when(
weekof_purchase < 240 ~ "Q1",
weekof_purchase < 253 ~ "Q2",
weekof_purchase < 266 ~ "Q3",
TRUE ~ "Q4"
), .before = "store_id") %>%
select(-weekof_purchase)
juice_clean <- juice_clean %>%
mutate(purchase_mm = as_factor(purchase_mm),
quarter_of_purchase = as_factor(quarter_of_purchase),
store_id = as_factor(store_id))
alias(purchase_mm ~ ., data = juice_clean)
juice_clean <- juice_clean %>%
select(-c(store, store7, list_price_diff, price_diff, disc_ch, disc_mm))
alias(purchase_mm ~ ., data = juice_clean)
train_index <- createDataPartition(juice_clean$purchase_mm,
p = 0.8,
list = FALSE,
times = 1)
train <- juice_clean[train_index, ]
test <- juice_clean[-train_index, ]
ggpairs(juice_clean, progress = FALSE)
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_previous_mains_one_pair <- glmulti(
purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch,
data = train,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = 6,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_previous_mains_one_pair)
glmulti_search_previous_mains_one_pair@objects[[1]]
glmulti_interactions <- glm(purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch + sale_price_mm:loyal_ch + sale_price_ch:loyal_ch + sale_price_ch:sale_price_mm,
data = juice_clean,
family = binomial(link = "logit"))
juice_clean_pred_interactions <- juice_clean %>%
add_predictions(glmulti_interactions, type = "response")
roc_with_interactions <- juice_clean_pred_interactions %>%
roc(response = purchase_mm, predictor = pred)
ggroc(data = roc_with_interactions)
threshold <-  0.5
juice_clean_pred_interactions_thresh <- juice_clean_pred_interactions %>%
mutate(pred_thresh_0.5 = pred >= threshold)
conf_table <- juice_clean_pred_interactions_thresh %>%
tabyl(purchase_mm, pred_thresh_0.5)
conf_table
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_all_mains <- glmulti(
purchase_mm ~ .,
data = train,
level = 1,               # No interactions considered, main effects only
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
plotty = F,
# report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_all_mains)
glmulti_search_previous_mains_one_pair <- glmulti(
purchase_mm ~ 1 + loyal_ch + sale_price_mm + sale_price_ch,
data = train,
level = 2,               # Interactions considered
method = "h",            # Exhaustive approach
crit = "bic",            # BIC as criteria
confsetsize = 10,        # Keep 10 best models
marginality = TRUE,      # consider pairs only if both main effects in model
minsize = 6,             # minsize, maxsize and marginality here force
maxsize = 6,             # inclusion of a single pair beyond the five main effects
plotty = F,
report = T,              # No plots, but provide interim reports
fitfunction = "glm",     # glm function
family = binomial(link = "logit")) # binomial family for logistic regression
summary(glmulti_search_previous_mains_one_pair)
glmulti_search_previous_mains_one_pair@objects[[1]]
