library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
View(titanic_set)
na.omit(titanic_set$survived)
titanic_set %>%
filter(is.na(survived))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
View(titanic_set)
titanic_set <- titanic_set %>%
filter(-is.na(survived))
titanic_set <- titanic_set %>%
filter(is.na(survived))
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_set %>%
filter(-is.na(survived))
titanic_set %>%
filter(na.omit(survived))
titanic_set %>%
na.omit(survived)
titanic_set <- titanic_set %>%
drop_na(survived)
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarkation), as_factor))
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor))
glimpse(titanic_set)
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult"))
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status)
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(X1, passenger_id, name, ticket, far, cabin))
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(1, passenger_id, name, ticket, far, cabin))
glimpse(titanic_set)
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(...1, passenger_id, name, ticket, far, cabin))
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(...1, passenger_id, name, ticket, fare, cabin))
View(titanic_set)
titanic_clean <- titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
titanic_set <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(...1, passenger_id, name, ticket, fare, cabin)) %>%
na.omit()
library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_set %>%
drop_na(survived)
titanic_set %>%
filter(survived %in% c(0,1))
titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked))
titanic_clean <- titanic_set %>%
drop_na(survived) %>%
mutate(across(c(sex, survived, pclass, embarked), as_factor)) %>%
mutate(age_status = if_else(age <= 16, "child", "adult")) %>%
drop_na(age_status) %>%
select(-c(...1, passenger_id, name, ticket, fare, cabin)) %>%
na.omit()
titanic_clean2 <- titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_clean <- titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
View(titanic_clean)
ggplot(titanic_clean, aes(class, fill = survived)) +
geom_bar()
ggplot(titanic_clean, aes(class, fill = survived_flag)) +
geom_bar()
ggplot(titanic_clean, aes(class, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(sex, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(age_status, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar()
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar()
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar(position = "fill")
titanic_clean %>%
group_by(sib_sp, parch) %>%
summarise(total = n()) %>%
ggplot(aes(total, fill = survived_flag)) +
geom_col()
titanic_clean %>%
group_by(sib_sp, parch) %>%
summarise(total = n()) %>%
ungroup() %>%
ggplot(aes(total, fill = survived_flag)) +
geom_col()
?summarise
titanic_clean %>%
group_by(sib_sp, parch) %>%
summarise(total = n(), .groups = drop) %>%
ggplot(aes(total, fill = survived_flag)) +
geom_col()
titanic_clean %>%
group_by(sib_sp, parch) %>%
summarise(total = n(), .groups = "drop") %>%
ggplot(aes(total, fill = survived_flag)) +
geom_col()
titanic_clean %>%
group_by(sib_sp, parch) %>%
summarise(total = n())
ggplot(titanic_clean, aes(parch, survived_flag)) +
geom_point()
ggplot(titanic_clean, aes(parch, survived_flag)) +
geom_jitter()
ggplot(titanic_clean, aes(parch, survived_flag)) +
geom_jitter(height = 0.2)
ggplot(titanic_clean, aes(parch, survived_flag)) +
geom_jitter(height = 0.2, alpha = 0.3)
ggplot(titanic_clean, aes(sib_sp, survived_flag)) +
geom_jitter(height = 0.2, alpha = 0.3)
library(rpart)
library(rpart.plot)
library(tidyverse)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
titanic_set <- titanic_set[shuffle_index, ]
titanic_clean <- titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
ggplot(titanic_clean, aes(class, fill = survived_flag)) +
geom_bar(position = "fill")
n_data <- nrow(titanic_clean)
test_index <- sample(1:n_data, size = n_data * 0.2)
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
library(janitor)
titantic_train %>%
tabyl(survived_flag)
titanic_train %>%
tabyl(survived_flag)
titanic_test %>%
tabyl(survived_flag)
n_data <- nrow(titanic_clean)
test_index <- sample(1:n_data, size = n_data * 0.2)
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
titanic_train %>%
tabyl(survived_flag)
titanic_test %>%
tabyl(survived_flag)
n_data <- nrow(titanic_clean)
test_index <- sample(1:n_data, size = n_data * 0.2)
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
titanic_train %>%
tabyl(survived_flag)
titanic_test %>%
tabyl(survived_flag)
titantic_fit <- rpart(
formula = dth_flag ~ .,
data = titanic_train,
method = "class"
)
titantic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4)
ggplot(titanic_clean, aes(survived_flag)) +
geom_bar()
290 / (290 +415)
titantic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4)
titantic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4)
titantic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4)
titantic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4)
rpart.plot(titantic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4,
type = 4,
extra = 101)
rpart.rules(titanic_fit, cover = TRUE)
titanic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titanic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4,
type = 4,
extra = 101)
rpart.rules(titanic_fit, cover = TRUE)
library(modelr)
titanic_test_pred <- titani_test %>%
add_predictions(titanic_fit, type = "class")
library(modelr)
titanic_test_pred <- titanic_test %>%
add_predictions(titanic_fit, type = "class")
titanic_test_pred
conf_mat <- titanic_test %>%
conf_mat(truth = survived_flag, estimate = pred)
library(yardstick)
conf_mat <- titanic_test %>%
conf_mat(truth = survived_flag, estimate = pred)
library(yardstick)
conf_mat <- titanic_test_pred %>%
conf_mat(truth = survived_flag, estimate = pred)
conf_mat
accuracy <- titanic_test_pred %>%
accuracy(truth = survived_flag, estimate = pred)
accuracy
titanic_test_pred %>%
sensitivity(truth = survived_flag, estimate = pred)
titanic_test_pred %>%
specificity(truth = survived_flag, estimate = pred)
library(caret)
confusionMatrix(titanic_test_pred$pred, titanic_test_pred$survived_flag)
library(ranger)
rf_classifier <- ranger(survived_flag ~ .,
data = titanic_train,
importance = "impurity",
num.trees = 1000,
mtry = 2,
min.node.size = 5)
rf_classifier
importance(rf_classifier)
titanic_test_pred <- titanic_test %>%
mutate(pred = predict(rf_classifier, data = titanic_test)$predictions)
titanic_test_pred
confusionMatrix(titanic_test_pred$pred, titanic_test_pred$survived_flag)
library(ranger)
control <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 10
)
tune_grid = expand.grid(
mtry = 1:6,
splitrule = c("gini", "extratrees"),
min.node.size = c(1, 3, 5)
)
rf_tune <- train(
survived_flag ~ .,
data = titanic_train,
method = "ranger",
metric = "Kappa",
num.trees = 1000,
importance = "impurity",
tuneGrid = tune_grid,
trControl = control
)
plot(rf_tune)
rf_tune
library(rpart)
library(rpart.plot)
library(tidyverse)
library(janitor)
library(tidyverse)
titanic_set <- read_csv('data/titanic_decision_tree_data.csv')
shuffle_index <- sample(1:nrow(titanic_set))
# shuffle the data so class order isn't in order - need this for training/testing split later on
# this isn't changing anything in the data its just changing order of rows
titanic_set <- titanic_set[shuffle_index, ]
titanic_clean <- titanic_set %>%
filter(survived %in% c(0,1)) %>%
# Convert to factor level
mutate(sex = as.factor(sex),
age_status = as.factor(if_else(age <= 16, "child", "adult")),
class = factor(pclass, levels = c(3,2,1), labels = c("Lower", "Middle", "Upper")),
survived_flag = factor(survived, levels = c(0,1), labels = c("No", "Yes")),
port_embarkation = as.factor(embarked)) %>%
select(sex, age_status, class, port_embarkation, sib_sp, parch, survived_flag) %>%
na.omit()
ggplot(titanic_clean, aes(survived_flag)) +
geom_bar()
ggplot(titanic_clean, aes(class, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(sex, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(age_status, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = survived_flag)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar()
ggplot(titanic_clean, aes(port_embarkation, fill = class)) +
geom_bar(position = "fill")
ggplot(titanic_clean, aes(parch, survived_flag)) +
geom_jitter(height = 0.2, alpha = 0.3)
ggplot(titanic_clean, aes(sib_sp, survived_flag)) +
geom_jitter(height = 0.2, alpha = 0.3)
n_data <- nrow(titanic_clean)
test_index <- sample(1:n_data, size = n_data * 0.2)
titanic_test <- slice(titanic_clean, test_index)
titanic_train <- slice(titanic_clean, -test_index)
titanic_train %>%
tabyl(survived_flag)
titanic_test %>%
tabyl(survived_flag)
titanic_fit <- rpart(
formula = survived_flag ~ .,
data = titanic_train,
method = "class"
)
rpart.plot(titanic_fit,
yesno = 2,
fallen.leaves = TRUE,
faclen = 6,
digits = 4,
type = 4,
extra = 101)
rpart.rules(titanic_fit, cover = TRUE)
library(modelr)
titanic_test_pred <- titanic_test %>%
add_predictions(titanic_fit, type = "class")
library(yardstick)
conf_mat <- titanic_test_pred %>%
conf_mat(truth = survived_flag, estimate = pred)
accuracy <- titanic_test_pred %>%
accuracy(truth = survived_flag, estimate = pred)
titanic_test_pred %>%
sensitivity(truth = survived_flag, estimate = pred)
titanic_test_pred %>%
specificity(truth = survived_flag, estimate = pred)
library(caret)
confusionMatrix(titanic_test_pred$pred, titanic_test_pred$survived_flag)
library(ranger)
rf_classifier <- ranger(survived_flag ~ .,
data = titanic_train,
importance = "impurity",
num.trees = 1000,
mtry = 2,
min.node.size = 5)
rf_classifier
importance(rf_classifier)
titanic_test_pred <- titanic_test %>%
mutate(pred = predict(rf_classifier, data = titanic_test)$predictions)
confusionMatrix(titanic_test_pred$pred, titanic_test_pred$survived_flag)
library(ranger)
control <- trainControl(
method = "repeatedcv",
number = 5,
repeats = 10
)
tune_grid = expand.grid(
mtry = 1:6,
splitrule = c("gini", "extratrees"),
min.node.size = c(1, 3, 5)
)
rf_tune <- train(
survived_flag ~ .,
data = titanic_train,
method = "ranger",
metric = "Kappa",
num.trees = 1000,
importance = "impurity",
tuneGrid = tune_grid,
trControl = control
)
rf_tune <- train(
survived_flag ~ .,
data = titanic_train,
method = "ranger",
metric = "Kappa",
num.trees = 1000,
importance = "impurity",
tuneGrid = tune_grid,
trControl = control
)
View(titanic_fit)
