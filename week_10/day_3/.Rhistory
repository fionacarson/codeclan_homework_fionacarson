library(tidyverse)
houses <- read_csv("data/kc_house_data.csv")
View(houses)
summary(houses)
houses %>%
select(-c(date, id, sqft_living, sqft_living15, zipcode)))
houses <- houses %>%
select(-c(date, id, sqft_living, sqft_living15, zipcode))
houses %>%
distinct(waterfront)
# converting waterfront column to logical
houses %>%
mutate(waterfront = as.logical(waterfront))
# converting waterfront column to logical
houses <- houses %>%
mutate(waterfront = as.logical(waterfront))
# converting yr_renovated to logical renovated column
houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(rennovated = yr_rennovated)
# converting yr_renovated to logical renovated column
houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(rennovated = yr_rennovated) %>%
select(-yr_renovated)
# converting yr_renovated to logical renovated column
houses <- houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(rennovated = yr_rennovated) %>%
select(-yr_renovated)
houses %>%
group_by(view) %>%
summarise(total = n())
houses %>%
group_by(condition) %>%
summarise(total = n())
houses %>%
group_by(grade) %>%
summarise(total = n())
houses %>%
group_by(condition) %>%
summarise(total = n())
houses %>%
group_by(view) %>%
summarise(total = n())
houses %>%
group_by(grade) %>%
summarise(total = n())
?rename
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses <- houses %>%
select(-c(date, id, sqft_living, sqft_living15, zipcode))
# converting waterfront column to logical
houses <- houses %>%
mutate(waterfront = as.logical(waterfront))
houses <- houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(rennovated = yr_rennovated)
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses <- houses %>%
select(-c(date, id, sqft_living, sqft_living15, zipcode))
# converting waterfront column to logical
houses <- houses %>%
mutate(waterfront = as.logical(waterfront))
# converting yr_renovated to logical renovated column
houses2 <- houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(rennovated = yr_rennovated) %>%
select(-yr_renovated)
houses2 <- houses %>%
mutate(yr_rennovated = ifelse(yr_renovated == 0, FALSE, TRUE))
# converting yr_renovated to logical renovated column
houses2 <- houses %>%
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated)
View(houses2)
as.factor
?as.factor
# convert view to factor (categorical ordinal)
houses %>%
as.factor(view)
as.factor(houses$view)
# convert view to factor (categorical ordinal)
houses %>%
mutate(view = as.factor(view, levels = c(0, 1, 2, 3, 4)))
# convert view to factor (categorical ordinal)
houses %>%
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4)))
glimpse(houses)
# convert view to factor (categorical ordinal)
houses <- houses %>%
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4)))
glimpse(houses)
# convert condition to factor (categorical ordinal)
houses <- houses %>%
mutate(view = condition(view, levels = c(1, 2, 3, 4, 5)))
# convert condition to factor (categorical ordinal)
houses <- houses %>%
mutate(view = factor(condition, levels = c(1, 2, 3, 4, 5)))
# lets group together grade - low (1-3), average (4-10), high (11-13)
houses %>%
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
# lets group together grade - low (1-3), average (4-10), high (11-13)
houses %>%
mutate(grade2 = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
# lets group together grade - low (1-3), average (4-10), high (11-13)
houses %>%
mutate(grade2 = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
), .after = grade)
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses <- houses %>%
select(-c(date, id, sqft_living, sqft_living15, zipcode)) %>%
# converting waterfront column to logical
mutate(waterfront = as.logical(waterfront)) %>%
# converting yr_renovated to logical renovated column
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated) %>%
# convert view to factor (categorical ordinal)
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4))) %>%
# convert condition to factor (categorical ordinal)
mutate(view = factor(condition, levels = c(1, 2, 3, 4, 5))) %>%
# lets group together grade - low (1-3), average (4-10), high (11-13)
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
glimpse(houses)
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses <- houses %>%
select(-c(date, id, sqft_living15, sqft_lot15, zipcode)) %>%
# converting waterfront column to logical
mutate(waterfront = as.logical(waterfront)) %>%
# converting yr_renovated to logical renovated column
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated) %>%
# convert view to factor (categorical ordinal)
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4))) %>%
# convert condition to factor (categorical ordinal)
mutate(view = factor(condition, levels = c(1, 2, 3, 4, 5))) %>%
# lets group together grade - low (1-3), average (4-10), high (11-13)
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
glimpse(houses)
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses <- houses %>%
select(-c(date, id, sqft_living15, sqft_lot15, zipcode)) %>%
# converting waterfront column to logical
mutate(waterfront = as.logical(waterfront)) %>%
# converting yr_renovated to logical renovated column
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated) %>%
# convert view to factor (categorical ordinal)
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4))) %>%
# convert condition to factor (categorical ordinal)
mutate(condition = factor(condition, levels = c(1, 2, 3, 4, 5))) %>%
# lets group together grade - low (1-3), average (4-10), high (11-13)
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
glimpse(houses)
alias(houses)
?alias
??alisa
??alias
library(GGally)
alias(houses)
library(ggfortify)
alias(houses)
library(fastDummies)
alias(houses)
library(mosaic)
alias(houses)
?alias
View(houses)
alias(lm(price ~ ., data = houses))
alias(lm(price ~ ., data = houses))
houses %>%
select(-sqft_basement)
houses <- houses %>%
select(-sqft_basement)
houses <- read_csv("data/kc_house_data.csv")
# removing columns that aren't needed
houses_tidy <- houses %>%
select(-c(date, id, sqft_living15, sqft_lot15, zipcode)) %>%
# converting waterfront column to logical
mutate(waterfront = as.logical(waterfront)) %>%
# converting yr_renovated to logical renovated column
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated) %>%
# convert view to factor (categorical ordinal)
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4))) %>%
# convert condition to factor (categorical ordinal)
mutate(condition = factor(condition, levels = c(1, 2, 3, 4, 5))) %>%
# lets group together grade - low (1-3), average (4-10), high (11-13)
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
))
alias(lm(price ~ ., data = houses_tidy))
houses_tidy <- houses_tidy %>%
select(-sqft_basement)
houses_tidy_numeric <- houses_tidy %>%
select_if(is.numeric)
houses_tidy_nonnumeric <- houses_tidy %>%
select_if(function(x) !is.numeric(x))
houses_tidy_nonnumeric$price <- houses_tidy$price
ggpairs(houses_tidy_numeric)
ggpairs(houses_tidy_numeric, progress = FALSE)
ggpairs(houses_tidy_nonnumeric, progress = FALSE)
# removing columns that aren't needed
houses_tidy <- houses %>%
select(-c(date, id, sqft_living15, sqft_lot15, zipcode)) %>%
# converting waterfront column to logical
mutate(waterfront = as.logical(waterfront)) %>%
# converting yr_renovated to logical renovated column
mutate(yr_renovated = ifelse(yr_renovated == 0, FALSE, TRUE)) %>%
rename(renovated = yr_renovated) %>%
# convert view to factor (categorical ordinal)
mutate(view = factor(view, levels = c(0, 1, 2, 3, 4))) %>%
# convert condition to factor (categorical ordinal)
mutate(condition = factor(condition, levels = c(1, 2, 3, 4, 5))) %>%
# lets group together grade - low (1-3), average (4-10), high (11-13)
mutate(grade = case_when(
grade < 4 ~ "low",
grade >10 ~ "high",
TRUE ~ "average"
),
grade = factor(grade, levels = c("low", "average", "high"))
)
houses_tidy <- houses_tidy %>%
select(-sqft_basement)
houses_tidy_numeric <- houses_tidy %>%
select_if(is.numeric)
houses_tidy_nonnumeric <- houses_tidy %>%
select_if(function(x) !is.numeric(x))
houses_tidy_nonnumeric$price <- houses_tidy$price
ggpairs(houses_tidy_nonnumeric, progress = FALSE)
model1 <- lm(price ~ sqft_living,
data = houses_tidy)
summary(model1)
autoplot(model1)
houses %>%
ggplot(aes(price, sqft_living)) +
geom_point()
houses %>%
ggplot(aes(price, sqft_living)) +
geom_point(aes(alpha = 0.2))
houses %>%
ggplot(aes(price, sqft_living)) +
geom_point(alpha = 0.2)
houses %>%
ggplot(aes(price, sqft_living)) +
geom_point(alpha = 0.1)
plot(model1)
View(houses_tidy)
model2 <- lm(price ~ sqft_living + bedrooms,
data = houses_tidy)
summary(model2)
autoplot(model2)
houses %>%
ggplot(aes(price, bedrooms)) %>%
geom_point()
houses %>%
ggplot(aes(price, bedrooms)) +
geom_point()
houses %>%
filter(bedrooms > 30)
houses %>%
filter(price == 640000)
plots(model2)
plot(model2)
View(houses)
houses %>%
filter(price == 15871)
plot(model2)
houses %>%
filter(row_number(15871))
filter(row_number == 15871
1
houses %>%
filter(row_number == "15871")
houses %>%
slice(15871)
houses %>%
mutate(bedrooms = ifelse(bedrooms > 30, 3, bedrooms))
houses %>%
mutate(bedrooms = ifelse(bedrooms > 30, 3, bedrooms)) %>%
slice(15871)
houses_tidy <- houses_tidy %>%
mutate(bedrooms = ifelse(bedrooms > 30, 3, bedrooms))
model2b <- lm(price ~ sqft_living + bedrooms,
data = houses_tidy)
summary(model2b)
autoplot(model2b)
houses_tidy %>%
ggplot(aes(price, sqft_above)) +
geom_point()
summary(model1b )
summary(model1b)
model1b <- lm(price ~ bedrooms,
data = houses_tidy)
summary(model1b)
model3 <- lm(price ~ sqft_living + bedrooms + waterfront,
data = houses_tidy)
summary(model3)
autoplot(model3)
houses_tidy %>%
add_residuals(model3)
library(modelr)
houses_tidy %>%
add_residuals(model3)
houses_resid <- houses_tidy %>%
add_residuals(model3)
ggpair(houses_resid, progress = FALSE)
ggpairs(houses_resid, progress = FALSE)
View(houses_resid)
houses_tidy_numeric <- houses_resid %>%
select_if(is.numeric)
houses_tidy_nonnumeric <- houses_resid %>%
select_if(function(x) !is.numeric(x))
houses_tidy_nonnumeric$resid <- houses_tidy$resid
houses_tidy_numeric <- houses_resid %>%
select_if(is.numeric)
houses_tidy_nonnumeric <- houses_resid %>%
select_if(function(x) !is.numeric(x))
houses_tidy_nonnumeric$resid <- houses_resid$resid
ggpairs(houses_tidy_numeric, progress = FALSE)
ggpairs(houses_tidy_nonnumeric, progress = FALSE)
model4 <- lm(price ~ sqft_living + bedrooms + waterfront + grade,
data = houses_tidy)
summary(model4)
autoplot(model4)
plot(model4)
anova(model3, model4)
anova(model2b, model3)
model2 <- lm(price ~ sqft_living + bathrooms,
data = houses_tidy)
summary(model2)
autoplot(model2)
model2 <- lm(price ~ sqft_living + bedrooms,
data = houses_tidy)
summary(model2)
model3b <- lm(price ~ sqft_living + bedrooms + latitude,
data = houses_tidy)
View(houses_tidy)
model3b <- lm(price ~ sqft_living + bedrooms + lat,
data = houses_tidy)
summary(model3b)
model4b <- lm(price ~ sqft_living + bedrooms + latitude + waterfront,
data = houses_tidy)
model4b <- lm(price ~ sqft_living + bedrooms + lat + waterfront,
data = houses_tidy)
summary(model4b)
autoplot(model4b)
autoplot(model4b)
houses_resid <- houses_tidy %>%
add_residuals(model4b)
houses_tidy_numeric <- houses_resid %>%
select_if(is.numeric)
houses_tidy_nonnumeric <- houses_resid %>%
select_if(function(x) !is.numeric(x))
houses_tidy_nonnumeric$resid <- houses_resid$resid
ggpairs(houses_tidy_numeric, progress = FALSE)
ggpairs(houses_tidy_numeric, progress = FALSE)
ggpairs(houses_tidy_nonnumeric, progress = FALSE)
View(model4b)
model5 <- lm(price ~ sqft_living + bedrooms + lat + waterfront + long + view + grade,
data = houses_tidy)
summary(model5)
model5b <- lm(price ~ sqft_living + bedrooms + lat + waterfront + long + view + condition,
data = houses_tidy)
summary(model5b)
